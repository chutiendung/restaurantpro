<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Custom="http://metro.mahapps.com/winfx/xaml/controls">
	<!-- Resource dictionary entries should be defined here. -->
	<Style x:Key="MetroTileStyle" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="{DynamicResource AccentColorBrush}"/>
		<Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}"/>
		<Style.BasedOn>
			<Style TargetType="{x:Type ButtonBase}">
				<Setter Property="Background" Value="{DynamicResource WhiteBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource BlackBrush}"/>
				<Setter Property="BorderThickness" Value="2"/>
				<Setter Property="Custom:ControlsHelper.ContentCharacterCasing" Value="Lower"/>
				<Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
				<Setter Property="FontWeight" Value="SemiBold"/>
				<Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
				<Setter Property="MinHeight" Value="25"/>
				<Setter Property="Padding" Value="5,6"/>
				<Setter Property="SnapsToDevicePixels" Value="True"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ButtonBase}">
							<Grid Background="{TemplateBinding Background}">
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal"/>
										<VisualState x:Name="Disabled">
											<Storyboard>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
													<SplineDoubleKeyFrame KeyTime="0" Value="0.7"/>
												</DoubleAnimationUsingKeyFrames>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_ContentPresenter">
													<EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
												</DoubleAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
									<VisualStateGroup x:Name="FocusStates">
										<VisualState x:Name="Focused"/>
										<VisualState x:Name="Unfocused"/>
									</VisualStateGroup>
									<VisualStateGroup x:Name="ValidationStates">
										<VisualState x:Name="Valid"/>
										<VisualState x:Name="InvalidFocused"/>
										<VisualState x:Name="InvalidUnfocused"/>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
								<Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								<Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0"/>
								<Custom:ContentControlEx x:Name="PART_ContentPresenter" ContentCharacterCasing="{Binding (Custom:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="{DynamicResource GrayBrush8}"/>
									<Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Background" Value="{DynamicResource BlackBrush}"/>
									<Setter Property="Foreground" Value="{DynamicResource WhiteBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</Style.BasedOn>
	</Style>
</ResourceDictionary>